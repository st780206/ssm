<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	id="WebApp_ID" version="3.0">
	<display-name>ssm demo</display-name>
	
	<!-- 字符集 过滤器  -->
 	<filter>
		<filter-name>CharacterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>CharacterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- Shiro Filter 权限控制   与Spring集成   -->
	<!-- DelegatingFilterProxy作用是自动到spring容器查找名字为shiroFilter（filter-name）的bean并把所有Filter的操作委托给它。
	然后将ShiroFilter配置到spring容器即可： -->
<!--     <filter> -->
<!--         <filter-name>shiroFilter</filter-name> -->
<!--         <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class> -->
<!--         <init-param> -->
<!--             <param-name>targetFilterLifecycle</param-name> -->
<!--             <param-value>true</param-value> -->
<!--         </init-param> -->
<!--     </filter> -->
<!--     <filter-mapping> -->
<!--         <filter-name>shiroFilter</filter-name> -->
<!--         <url-pattern>/*</url-pattern> -->
<!--     </filter-mapping> -->
    <!-- 
	从Shiro 1.2开始引入了Environment/WebEnvironment的概念，
	即由它们的实现提供相应的SecurityManager及其相应的依赖。
	ShiroFilter会自动找到Environment然后获取相应的依赖。

	<listener>  
	   <listener-class>org.apache.shiro.web.env.EnvironmentLoaderListener</listener-class>  
	</listener>   

	通过EnvironmentLoaderListener来创建相应的WebEnvironment，并自动绑定到ServletContext，默认使用IniWebEnvironment实现。

	可以通过如下配置修改默认实现及其加载的配置文件位置：

	<context-param>  
	   <param-name>shiroEnvironmentClass</param-name>  
	   <param-value>org.apache.shiro.web.env.IniWebEnvironment</param-value>  
	</context-param>  
	<context-param>  
	    <param-name>shiroConfigLocations</param-name>  
	    <param-value>classpath:shiro.ini</param-value>  
	</context-param>   
	shiroConfigLocations默认是“/WEB-INF/shiro.ini”，IniWebEnvironment默认是先从/WEB-INF/shiro.ini加载，如果没有就默认加载classpath:shiro.ini。
   -->
	
	<!-- 设置Spring容器加载配置文件路径 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring_conf/**/applicationContext-*.xml</param-value>
		<!-- 
		<param-value>classpath:applicationContext-*.xml</param-value>
		 -->
	</context-param>
	
	<!-- 设置log4j2加载配置文件路径, servlet3.0以上不用进行另外配置 -->
	<context-param>
	     <param-name>log4jConfiguration</param-name>
	     <param-value>/WEB-INF/log4j2.xml</param-value>
	</context-param>

	<!-- Spring view分发器 -->
	<servlet>
		<servlet-name>dispatcher</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<!-- 设置Spring容器加载配置文件路径 -->
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring_mvc/applicationContext-*.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
		<async-supported>true</async-supported>
	</servlet>
	<!-- 默认页的访问 -->
	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>/demo1</url-pattern>
		<!-- <url-pattern>/index</url-pattern> -->
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>*.mvc</url-pattern>
		<!--拦截/*，这是一个错误的方式，请求可以走到Action中，但转到jsp时再次被拦截，不能访问到jsp。 
			拦截/，restful风格 弊端：会导致静态文件（jpg,js,css）被拦截后不能正常显示。解决办法看dispatcher-->
	</servlet-mapping>
	
	<!-- Spring会创建一个WebApplicationContext上下文，称为父上下文（父容器） ，
	保存在 ServletContext中，key是WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE的值。
	可以使用Spring提供的工具类取出上下文对象：WebApplicationContextUtils.getWebApplicationContext(ServletContext);
	DispatcherServlet是一个Servlet,可以同时配置多个，每个 DispatcherServlet有一个自己的上下文对象（WebApplicationContext），
	称为子上下文（子容器），子上下文可以访问父上下文中的内容，
	但父上下文不能访问子上下文中的内容。 它也保存在 ServletContext中，
	key是"org.springframework.web.servlet.FrameworkServlet.CONTEXT"+Servlet名称。当一个Request对象产生时，
	会把这个子上下文对象（WebApplicationContext）保存在Request对象中，key是DispatcherServlet.class.getName() + ".CONTEXT"。
	可以使用工具类取出上下文对象：RequestContextUtils.getWebApplicationContext(request);-->
	
	<!-- ShiroFilter会自动找到Environment然后获取相应的依赖。 -->
<!-- 	<listener>  
	   <listener-class>org.apache.shiro.web.env.EnvironmentLoaderListener</listener-class>  
	</listener>    -->
	<!-- Spring监听器 -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<!-- 防止Spring内存溢出监听器 -->
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>
	
	<welcome-file-list>
		<!-- 默认页的访问 -->
		<welcome-file>demo1</welcome-file>
		<!-- <welcome-file>index</welcome-file> -->
		<!-- 使用此index.jsp可以屏蔽浏览器的工具条，菜单栏等 -->
		<!-- <welcome-file>index.jsp</welcome-file> -->
	</welcome-file-list>
	
</web-app>