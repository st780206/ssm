<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-4.3.xsd  
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
						http://www.springframework.org/schema/tx
						http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- 会话Cookie模板  sessionIdCookie是用于生产Session ID Cookie的模板-->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
	    <constructor-arg value="sid"/>
	    <property name="httpOnly" value="true"/>
	    <property name="maxAge" value="180000"/>
	</bean>

	<!-- web 会话管理器 -->
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
	    <property name="globalSessionTimeout" value="1800000"/>
	    <property name="deleteInvalidSessions" value="true"/>
	    <property name="sessionValidationSchedulerEnabled" value="true"/>
	    <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
	    <!-- <property name="sessionDAO" ref="sessionDAO"/> -->
	    <property name="sessionIdCookieEnabled" value="true"/>
	    <property name="sessionIdCookie" ref="sessionIdCookie"/>
	</bean>

	<!-- web 安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="userRealm"/>
	    <property name="sessionManager" ref="sessionManager"/>
	    <property name="cacheManager" ref="cacheManager"/>
	</bean>
	
	<!-- 基于Form表单的身份验证过滤器 authc -->  
	<bean id="formAuthenticationFilter" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">  
	    <property name="usernameParam" value="username"/>
	    <property name="passwordParam" value="password"/>
	    <property name="loginUrl" value="/login.jsp"/>
	</bean>

	<!-- 基于Basic的拦截器身份验证 authcBasic -->  
	<bean id="basicHttpAuthenticationFilter" class="org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter">  
	</bean>

	<!--   
       Shiro主过滤器本身功能十分强大，其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行  
       Web应用中，Shiro可控制的Web请求必须经过Shiro主过滤器的拦截，Shiro对基于Spring的Web应用提供了完美的支持   
    -->  
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">  
        <!-- Shiro的核心安全接口，这个属性是必须的 -->  
        <property name="securityManager" ref="securityManager"></property>
        <!-- 要求登录时的链接(登录页面地址)，非必须的属性，默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->
        <property name="loginUrl" value="/security/login"></property>
        <!-- 登录成功后要跳转的连接(本例中此属性用不到，因为登录成功后的处理逻辑在LoginController里硬编码) -->
        <!-- <property name="successUrl" value="/" ></property> -->
        <!-- 用户访问未对其授权的资源时，所显示的连接 -->
        <!-- <property name="unauthorizedUrl" value="/"></property> -->
		<!-- filters属性用于定义自己的过滤器，即ini配置中的[filters]部分； -->
        <property name="filters">
	        <map>
	            <entry key="authc" value-ref="formAuthenticationFilter"/>
	        </map>
			<!-- <util:map>  
	            <entry key="authc" value-ref="formAuthenticationFilter"/>
	        </util:map> -->
	    </property>
	    <!-- filterChainDefinitions用于声明url和filter的关系，即ini配置中的[urls]部分 -->
	    <!-- 其格式是： “url=拦截器[参数]，拦截器[参数]”；即如果当前请求的url匹配[urls]部分的某个url模式，将会执行其配置的拦截器。
		比如anon拦截器表示匿名访问（即不需要登录即可访问）；
		authc拦截器表示需要身份认证通过后才能访问；
		roles[admin]拦截器表示需要有admin角色授权才能访问；
		 而perms["user:create"]拦截器表示需要有“user:create”权限才能访问 -->
        <property name="filterChainDefinitions">
            <value>
				/index.jsp = anon
	            /unauthorized.jsp = anon
	            /login.jsp = authc
	            /logout = logout
	            /** = user
            </value>
        </property>
	</bean>
	
   <!--   
       开启Shiro的注解(如@RequiresRoles，@RequiresPermissions)，需借助SpringAOP扫描使用Shiro注解的类，  
       并在必要时进行安全逻辑验证  
    -->  
    <!--  
    <bean  
        class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"></bean>  
    <bean  
        class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">  
        <property name="securityManager" ref="securityManager"></property>  
    </bean>  
    -->  
	<!-- 对FilterChain过滤链的定义详细阐述一下：
		•测试用例中对/security/*的访问是不需要认证控制的，这主要是用于用户登录和退出的
		•测试用例中对/tag的访问是需要认证控制的，就是说只有通过认证的用户才可以访问该资源。
		如果用户直接在地址栏中访问http://localhost:8880/learning/tag，系统会自动跳转至登录页面，要求用户先进行身份认证。
	 -->
	 
	 
	 
	 
	 <!-- /////////////////////////////// -->
	<!-- Shiro's main business-tier object for web-enabled applications -->
<!-- 	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="shiroDbRealm" />
		<property name="cacheManager" ref="cacheManager" />
	</bean> -->
	<!-- 项目自定义的Realm -->
<!-- 	<bean id="shiroDbRealm" class="cn.ssms.realm.ShiroDbRealm">
		<property name="cacheManager" ref="cacheManager" />
	</bean>
	<bean id="cacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager" /> -->
	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<!-- <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" /> -->
	<!-- AOP式方法级权限检查 -->
<!-- 	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean> -->
</beans>   
